[build-system]
requires = ["setuptools>=80.9.0"]
build-backend = "setuptools.build_meta"


[project]
name = "chipiron"
version = "0.1.9"
description = "chipiron plays chess"
keywords = ["chess", "AI", "torch"]
classifiers = [
  "Programming Language :: Python :: 3",
  "Operating System :: OS Independent",
]
requires-python = ">=3.13"
dependencies = [
    "PyYAML",
    "PySide6==6.9.2",
    "chess>=1.11.2",
    "plotly>=6.3.0",
    "sortedcollections>=2.1.0",
    "pandas==2.3.2",
    "numpy==2.2.6",
    "torch>=2.8.0",
    "torchinfo",
    "numba>=0.61.2",
    "graphviz>=0.20.1",
    "dacite>=1.9.2",
    "customtkinter>=5.2",
    "pyarrow",
    "shakmaty_python_binding>=0.1.5",
    "gprof2dot",
    "mlflow",
    "parsley_coco>=0.1.30",
    "gdown",
    "zstandard",
    "rich"
]
license = "GPL-3.0-only"
license-files = ["LICENSE"]

readme = { file = "README.md", content-type = "text/markdown" }

authors = [
  { name = "Victor Gabillon", email = "victorgabillon@gmail.com" }
]

[project.urls]
Homepage = "https://github.com/victorgabillon/chipiron"
"Bug Tracker" = "https://github.com/victorgabillon/chipiron/issues"


[tool.setuptools]
include-package-data = true


[tool.setuptools.package-data]
chipiron = [
  "data/players/**/*.yaml",
  "data/players/**/*.pt",
  "data/settings/*.yaml",
  "data/starting_boards/*.text",
  "scripts/learn_nn_supervised/board_evaluators_common_training_data/**/*.yaml", # think about removing this for cleanliness at some point
  "scripts/learn_nn_supervised/board_evaluators_common_training_data/**/*.pt",
  "tests/data/trees/**/*.yaml",
]

[tool.setuptools.packages.find]
where = ["."]
include = ["chipiron", "chipiron.*"]
exclude = ["tests*", "docs", "examples", "build", "dist", "venv", "env", ".venv", ".env", "__pycache__", "*.egg-info"]



[tool.pytest.ini_options]
addopts = "--cov=chipiron"
testpaths = [
    "chipiron",
    "tests"
]

[tool.mypy]
mypy_path = "."
ignore_missing_imports = true
show_error_codes = true
warn_unreachable = true
no_implicit_reexport = true

# Disallow dynamic typing
#disallow_any_unimported = true
#disallow_any_expr = true
#disallow_any_decorated = true
#disallow_any_generics = true
#disallow_any_explicit = true
#disallow_subclassing_any = true

# Disallow untyped definitions and calls
disallow_untyped_calls = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true

# None and optional handling
no_implicit_optional = true

# Configuring warnings
warn_unused_ignores = true
warn_no_return = true
warn_return_any = true
warn_redundant_casts = true

# Misc things
strict_equality = true

# Config file
warn_unused_configs = true



[[tool.mypy.overrides]]
module = [
    "PySide6",
]
ignore_missing_imports = true
follow_imports = 'skip'


[[tool.mypy.overrides]]
module = 'PySide6.*'
follow_imports = 'skip'
ignore_missing_imports = true


[tool.mypy-PySide6]
ignore_missing_imports = true


[tool.ruff]
line-length = 88
target-version = "py313"

# Enable import sorting (alphabetical + group order)
lint.select = ["I", "F", "E", "B"]  # I = imports, F = pyflakes, E = pycodestyle

# Ignore rules you don't care about
lint.ignore = [ "E501"]

# Optional: add your first-party package to extend the known group
[tool.ruff.lint.per-file-ignores]
# If needed, can add file-specific ignores

[tool.black]
line-length = 88
target-version = ['py313']

[tool.pylint]
py-version = "3.13"
extension-pkg-whitelist = ["PyQt5", "PySide6"]

[tool.pylint.format]
max-line-length = 88

#[tool.pylint.messages_control]
disable = ["C0301"]

[tool.pylint.typecheck]
# Optional: same as init-hook in .pylintrc
init-hook = "import sys; sys.path.append('.')"